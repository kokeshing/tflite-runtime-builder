name: Build TensorFlow Lite runtime

on:
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      version:
        description: "Semantic version (e.g., 2.15.0)"
        required: true
      repository:
        description: "Name of a target repository"
        default: "tensorflow/tensorflow"
        required: false

permissions:
  contents: write

env:
  TF_PYTHON_VERSION: "3.10"
  VERSION:
    |- # Enter release tag name or version in workflow_dispatch. Recent version if not specified
    ${{ github.event.release.tag_name || github.event.inputs.version || '2.15.0' }}
  REPOSITORY: ${{ github.event.inputs.repository || 'tensorflow/tensorflow' }}

jobs:
  build-macos:
    runs-on: macos-12
    strategy:
      fail-fast: false
      matrix:
        include:
          - config: macos
            cpu: x86_64
            artifact_name: tflite-runtime-osx-x86_64
          - config: macos_arm64
            cpu: arm64
            artifact_name: tflite-runtime-osx-arm64
    steps:
      - uses: actions/checkout@v3
        with:
          repository: ${{ env.REPOSITORY }}
          ref: v${{ env.VERSION }}
          submodules: recursive
          github-server-url: https://github.com
      - uses: bazelbuild/setup-bazelisk@v2
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.TF_PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          pip install numpy
      - name: Build runtime
        run: |
          mkdir -p artifact

          # Main
          bazel build --config=${{ matrix.config }} --macos_cpus=${{ matrix.cpu }} --cxxopt=--std=c++17 -c opt --define tflite_with_xnnpack=true tensorflow/lite/c:tensorflowlite_c
          cp -f bazel-bin/tensorflow/lite/c/libtensorflowlite_c.dylib artifact

          # Metal Delegate
          bazel build --config=${{ matrix.config }} --macos_cpus=${{ matrix.cpu }} --cxxopt=--std=c++17 -c opt --copt -Os --copt -DTFLITE_GPU_BINARY_RELEASE --copt -fvisibility=default --linkopt -s --strip always tensorflow/lite/delegates/gpu:tensorflow_lite_gpu_dylib
          cp -f bazel-bin/tensorflow/lite/delegates/gpu/tensorflow_lite_gpu_dylib.dylib artifact/libtensorflowlite_metal_delegate.dylib

          mv artifact/ "${{ matrix.artifact_name }}-${{ env.VERSION }}"
          tar cfz "${{ matrix.artifact_name }}-${{ env.VERSION }}.tgz" "${{ matrix.artifact_name }}-${{ env.VERSION }}"
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}-${{ env.VERSION }}
          retention-days: 1
      - uses: softprops/action-gh-release@v1
        with:
          files: "*.tgz"
          tag_name: ${{ env.VERSION }}

  build-macos-universal:
    needs: [build-macos]
    runs-on: macos-12
    steps:
      - uses: actions/download-artifact@v4
      - name: Display structure of downloaded files
        run: ls -R ./
      - name: Build universal binary
        run: |
          mkdir -p artifact
          lipo -create -output artifact/libtensorflowlite_c.dylib "tflite-runtime-osx-x86_64-${{ env.VERSION }}/libtensorflowlite_c.dylib" "tflite-runtime-osx-arm64-${{ env.VERSION }}/libtensorflowlite_c.dylib"
          lipo -create -output artifact/libtensorflowlite_metal_delegate.dylib "tflite-runtime-osx-x86_64-${{ env.VERSION }}/libtensorflowlite_metal_delegate.dylib" "tflite-runtime-osx-arm64-${{ env.VERSION }}/libtensorflowlite_metal_delegate.dylib"
          mv artifact/ "tflite-runtime-osx-universal2-${{ env.VERSION }}"
          tar cfz "tflite-runtime-osx-universal2-${{ env.VERSION }}.tgz" "tflite-runtime-osx-universal2-${{ env.VERSION }}"
      - uses: softprops/action-gh-release@v1
        with:
          files: "*.tgz"
          tag_name: ${{ env.VERSION }}
